@{
    ViewBag.Title = "包管理";
}

<div class="package-div">
    <ul class="package-list">
    </ul>

    <div class="jumbotron">
        <form>
            <div class="form-group">
                <input type="text" style="max-width: none;" onchange="filterPackages(this)" class="form-control" id="searchPackage" placeholder="输入关键字筛选包列表">
            </div>
        </form>
        <div class="table-div">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th><input id="check-all" onclick="checkAll()" type="checkbox" /></th>
                        <th>包名称</th>
                        <th>版本</th>
                        <th>发布时间</th>
                        <th>作者</th>
                        <th>大小</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody id="table-body">
                </tbody>
            </table>
        </div>
        <div class="table-tool">
            <div><span id="checkedCount"></span></div>
            <div style="margin-right: 44px">
                <button class="btn btn-danger" onclick="DeleteOverdue()">清理过期版本</button>
                <button id="deleteChecked" class="btn btn-danger" disabled="disabled" onclick="DeleteChecked(this)">删除</button>
            </div>
        </div>

    </div>
</div>

@section scripts
{
    <script>
        var packages = [];
        var packageNameInfos = [];
        var pendingDelete = [];
        $(function () {
            Reload();
        });

        function Reload() {
            packages = [];
            packageNameInfos = [];
            $("#deleteChecked").attr("disabled", false).text("删除");
            $("#check-all").prop("checked", false);
            $.get("/nuget/Packages",
                function (xml) {
                    var doc = $(xml);
                    packages = [];
                    var entry = doc.find("feed").find("entry");
                    if (entry.length === 0) {
                        $("#table-body").html('<tr><td colspan="7" style="text-align:center">没有包</td></tr>');
                    } else {
                        $("#table-body").html('');
                    }
                    var index = 0;
                    entry.each(function () {
                        var properties = $(this).find("m\\:properties");
                        var id = properties.find("d\\:Id").text();
                        var version = properties.find("d\\:Version").text();
                        var authors = properties.find("d\\:Authors").text();
                        var publish = properties.find("d\\:Published").text().split('.')[0].replace('T', ' ');
                        var size = properties.find("d\\:PackageSize").text();

                        var item = {
                            sn: index,
                            id: id,
                            version: version,
                            authors: authors,
                            publish: publish,
                            size: size
                        };
                        packages.push(item);
                        renderItem(item);
                        index++;
                    });
                    sumChecked();
                    renderSummary();

                    alert("包数据加载成功，共计：" + packages.length + "个");
                });
        }

        function renderSummary() {
            $(".package-list").html($("<li data-name=''>全部</li>"));
            for (var i = 0; i < packageNameInfos.length; i++) {
                var item = packageNameInfos[i];
                $(".package-list")
                    .append($("<li data-name=" + item.name + ">" + item.name + "&nbsp;[" + item.count + "]</li>"));
            }
            $("ul.package-list>li").hover(function () {
                $(this).addClass("li-on");
            },
                function () {
                    $(this).removeClass("li-on");
                }).click(function () {
                    var key = $(this).data("name");
                    if (key.length === 0) {
                        doFilterPackages(null);
                    } else {
                        doFilterPackages(new RegExp("^" + key + "$", "i"));
                    }
                });
        }

        function renderItem(item) {

            var needAdd = true;
            for (var i = 0; i < packageNameInfos.length; i++) {
                if (packageNameInfos[i].name === item.id) {
                    packageNameInfos[i].count += 1;
                    needAdd = false;
                    break;
                }
            }
            if (needAdd) {
                packageNameInfos.push({
                    name: item.id,
                    count: 1
                });
            }

            var html = "";
            html += "<tr>";
            html += "<th><input class='item-checkbox' id='cb-" + item.sn + "' type='checkbox'/></th>";
            html += "<td onclick='cbOnClick(\"" + item.sn + "\")'>" + item.id + "</td>";
            html += "<td onclick='cbOnClick(\"" + item.sn + "\")'>" + item.version + "</td>";
            html += "<td onclick='cbOnClick(\"" + item.sn + "\")'>" + item.publish + "</td>";
            html += "<td onclick='cbOnClick(\"" + item.sn + "\")'>" + item.authors + "</td>";
            html += "<td onclick='cbOnClick(\"" +
                item.sn +
                "\")'>" +
                (parseInt(item.size) / 1024).toFixed(0) +
                " KB</td>";
            html += '<td><button id="del-btn-' +
                item.sn +
                '" type="button" data-id="' +
                item.id +
                '" data-ver="' +
                item.version +
                '" class="btn btn-danger" onclick="Delete(this)">删除</button></td>';
            html += "</tr>";
            $("#table-body").append($(html));
        }

        function cbOnClick(sn) {
            $("#cb-" + sn).click();
            var isAllChecked = true;
            $(".item-checkbox").each(function () {
                isAllChecked = isAllChecked && $(this).prop("checked");
            });
            $("#check-all").prop("checked", isAllChecked);
            sumChecked();
        }

        function checkAll() {
            var val = $("#check-all").prop("checked");
            $(".item-checkbox").prop("checked", val);
            sumChecked();
        }

        function sumChecked() {
            var checked = $(".item-checkbox:checked").length;
            $("#checkedCount").data("checked", checked).text("已选中" + checked + "项");
            $("#deleteChecked").attr("disabled", checked <= 0);
        }

        function Delete(btn) {
            if (confirm("确定要删除该包么？")) {
                var id = $(btn).data("id");
                var ver = $(btn).data("ver");
                delPackage(id, ver, Reload);
            }
        }

        function delPackage(id, ver, callback) {
            $.post("/api/Package/Delete?id=" + id + "&version=" + ver,
                function (r) {
                    if (r) {
                        alert(r);
                        Reload();
                    } else {
                        callback();
                    }
                });
        }

        function DeleteChecked(btn) {
            var all = $("#checkedCount").data("checked");
            if (confirm("确定要删除选中的" + all + "项么？")) {
                $("#deleteChecked").attr("disabled", true).text("...");
                var todo = [];
                $(".item-checkbox:checked").each(function () {
                    var btn = $("#del-btn-" + $(this).attr("id").replace("cb-", ""));
                    var id = btn.data("id");
                    var ver = btn.data("ver");
                    todo.push({
                        id: id,
                        ver: ver
                    });
                });
                if (todo.length <= 0) return;

                var callback = function () {
                    todo.splice(0, 1);
                    if (todo.length <= 0) {
                        $("#deleteChecked").attr("disabled", false).text("删除");
                        Reload();
                    } else {
                        delPackage(todo[0].id, todo[0].ver, callback);
                    }
                };

                delPackage(todo[0].id, todo[0].ver, callback);
            }
        }

        function filterPackages(input) {
            var txt = $(input).val();
            if (txt.length === 0) {
                doFilterPackages(null);
            } else {
                doFilterPackages(new RegExp(".*" + txt + ".*", "i"));
            }
        }

        function doFilterPackages(regex) {
            if (regex) {
                var result = [];
                for (var i = 0; i < packages.length; i++) {
                    var id = packages[i].id;
                    var match = regex.test(id);
                    if (match) {
                        result.push(packages[i]);
                    }
                }
                renderArray(result);
            } else {
                renderArray(packages);
            }
        }

        function renderArray(array) {
            if (array.length === 0) {
                $("#table-body").html('<tr><td colspan="7" style="text-align:center">没有包</td></tr>');
            } else {
                $("#table-body").html('');
                for (var i = 0; i < array.length; i++) {
                    renderItem(array[i]);
                }
            }
            sumChecked();
        }

        function DeleteOverdue() {
            if (!window.confirm("确定要移除所有库的过期版本么？")) return;
            var maxVersions = [];
            packages.forEach(ele => {
                var index = maxVersions.findIndex(a => a.id === ele.id);
                if (index >= 0) {
                    if (isVersionMaxThan(ele, maxVersions[index])) {
                        maxVersions.splice(index, 1);
                        maxVersions.push(ele);
                    }
                } else {
                    maxVersions.push(ele);
                }
            });
            pendingDelete = [];
            packages.forEach(ele => {
                var max = maxVersions.find(a => a.id === ele.id);
                if (!max) return;
                if (max.version === ele.version) return;
                pendingDelete.push(ele);
            });

            if (pendingDelete.length === 0) {
                alert("已经没有可删除的过期包了");
                return;
            }

            deletePackages();
        }

        function deletePackages() {
            if (pendingDelete.length === 0) {
                Reload();
                return;
            }
            var package = pendingDelete[0];
            console.log("正在删除包 " + package.id + " " + package.version);
            $.post("/api/Package/Delete?id=" + package.id + "&version=" + package.version,
                function (r) {
                    if (r) {
                        if (confirm("删除包" + package.id + " " + package.version + "失败:" + r + "，是否继续？")) {
                            deletePackages();
                        }
                    } else {
                        pendingDelete.splice(0, 1);
                        deletePackages();
                    }
                });
        }

        function isVersionMaxThan(a, b) {
            var av = a.version.split(".");
            var bv = b.version.split(".");
            var max = av.length > bv.length ? av.length : bv.length;
            for (var i = 0; i < max; i++) {
                var va = parseInt(i < av.length ? av[i] : 0);
                var vb = parseInt(i < bv.length ? bv[i] : 0);
                if (va > vb) return true;
                if (va < vb) return false;
            }
            return false;
        }

    </script>
}
